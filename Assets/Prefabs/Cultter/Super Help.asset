%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: e992c02bdb92cd640adeb653ce9d10fb, type: 3}
  m_Name: Super Help
  m_EditorClassIdentifier: 
  articleBlocks:
  - articleName: Basic Controls
    articleText: 'Guide G4wain by writing a short program with code.

      

      The
      spacebar opens the Code Editor. While it is open, you can type your program
      into it. Press the green Play button in the lower right to start your program.

      

      Press
      escape to close the Code Editor. The Code Editor will also close once you press
      the Play button.

      

      Take note that pressing the Play button resets
      G4wain''s position and the level''s state to the beginning, so you have to
      write code that completely lists instructions for G4wain to navigate the level
      from start to finish.'
  - articleName: Basic Syntax
    articleText: 'To get G4wain to do anything, write instructions in the form of
      code.

      

      Each instruction must be written on its own line, and
      each line must be closed with a semicolon. The semicolon indicates the end
      of a line and instructs G4wain to read the instructions in the next line.

      

      To
      make G4wain do things, such as move, you have to use methods. Methods are blocks
      of code that perform certain actions. To use methods, you must first specify
      from where those methods are coming from. To access the methods G4wain knows,
      refer to it with "Bot.".

      

      After writing "Bot.", you can use
      the methods G4wain has access to, such as movement methods. Like so:

      

      Bot.moveUp();

      Bot.moveRight();'
  - articleName: Methods
    articleText: 'Bot has a set of methods it could perform to navigate the Monolith.
      The Bot class and its methods (moveUp, moveDown(), etc.) are unique to this
      game! You won''t be using them in real code.

      

      G4wain has the
      moveUp, moveDown, moveLeft, and moveRight methods which you''ll use to instruct
      G4wain to move in a certain direction. To call a method, use that method''s
      name and add "()" at the end.

      

      For example:

      

      Bot.moveRight();

      Bot.moveDown();

      Bot.moveLeft();

      

      The
      code above will make G4wain move right one space, down one space, and left
      one space.'
  - articleName: Arguments
    articleText: 'Arguments are values you pass into methods. Some methods require
      arguments, some don''t, and some can function with or without an argument.

      

      Arguments
      are written within the () at the end of a method. If a method requires multiple
      arguments, values are separated by a comma.

      

      For example:

      Bot.moveUp(3);

      

      This
      will make G4wain move up 3 spaces instead of 1 - and using only one line of
      code instead of the usual three!

      

      Take note that there are
      some methods that require arguments or else they wouldn''t know what to do.

      

      For
      example:

      

      Bot.say("Hello World!") //G4wain will say "Hello
      World!"

      Bot.say() //G4wain won''t know what to say - this is an error!'
  - articleName: Variables and Data Types
    articleText: 'Variables are containers for storing values, each with its own
      data type. A data type is a classification of a value, like how numbers and
      words are different from one another. There are different data types in C#:

      

      int
      - stores integers (whole numbers) such as 123 or -789.

      double - stores
      decimals such as 20.52 or -20.52.

      char - stores single characters such
      as ''A'' or ''B''. Char values must be surrounded by single quotes ('').

      string
      - stores text, such as "Hello World!". String values must be surrounded by
      double quotes (").

      bool - stores a true or false value

      

      Variables
      can be called in code by using their identifier, or their name. Much like in
      math, a variable is replaced by the value it represents. For example:

      

      int
      num1 = 50;

      int num2 = num + 100;

      

      The first line creates
      a variable with the name num1 and a value of 50. The second variable creates
      a variable with the name num2 and its value is the sum of 100 and the value
      of num, which is 50. Which means num2 equals 150. Another example:

      

      string
      text = "Hello World!";

      Bot.say(text);

      

      The first line
      creates a variable called text that stores the string "Hello World!". Once
      called by the say() method, G4wain says the value of the text variable, which
      is "Hello World!".'
  - articleName: Declaring and Assigning Variables
    articleText: 'Variables are containers for storing values, each with its own
      data type. A data type is a classification of a value, like how numbers and
      words are different from one another. There are different data types in C#:

      

      int
      - stores integers (whole numbers) such as 123 or -789.

      double - stores
      decimals such as 20.52 or -20.52.

      char - stores single characters such
      as ''A'' or ''B''. Char values must be surrounded by single quotes ('').

      string
      - stores text, such as "Hello World!". String values must be surrounded by
      double quotes (").

      bool - stores a true or false value

      

      Variables
      can be called in code by using their identifier, or their name. Much like in
      math, a variable is replaced by the value it represents. For example:

      

      int
      num1 = 50;

      int num2 = num + 100;

      

      The first line creates
      a variable with the name num1 and a value of 50. The second variable creates
      a variable with the name num2 and its value is the sum of 100 and the value
      of num, which is 50. Which means num2 equals 150. Another example:

      

      string
      text = "Hello World!";

      Bot.say(text);

      

      The first line
      creates a variable called text that stores the string "Hello World!". Once
      called by the say() method, G4wain says the value of the text variable, which
      is "Hello World!".

      To create a variable, you must declare it by specifying
      its type and assigning a value with this syntax:

      

      type varName
      = value;

      

      where type is the data type of the variable, variableName
      is its unique identifier, and value is the value it''s meant to store. The
      equals sign (=) assigns values to a variable.

      

      Example:

      string
      greeting = "Hello World!";

      

      This creates a string variable
      called greeting that can store the text "Hello World!".

      

      You
      can also declare a variable without assigning the value, then assign the value
      later. For example:

      

      int num;

      num = 15;

      

      The
      first line declares an empty int variable, the second line assigns a value
      to it.

      

      Take note: assigning a new value to an existing variable
      overwrites its previous value. For example:

      

      int num = 20;

      num
      = 30;

      Bot.say(num);

      

      In this example, num becomes 30.
      So if num is called by the say() method, G4wain says 30 instead of 20.'
  - articleName: Arithmetic Operators
    articleText: 'Much like in math, operators are used to perform operations on
      variables and values. The arithmetic operators are:

      

      "+" for
      addition,

      "-" for subtraction,

      "*" for multiplication,

      "/"
      for division,

      "%" for modulus operations,

      "++" for incrementing,

      "--"
      for decrementing.

      

      Here are some examples of how to use operators
      in code:

      

      int sum = 100 + 200; //300

      int difference
      = 350 - 150; //200

      int product = sum * 2; //600 (300 * 2)

      int
      quotient = difference / 2; //100 (200 / 2)

      

      Take note: code
      follows the PEMDAS rule! It evaluates mathematical expressions in parentheses
      first, then does multiplication, then division, then addition, then subtraction
      in that order.

      

      The increment and decrement operators are special
      - they''re used to operate on variables by increasing or decreasing their value
      by one. For example:

      

      int x = 10;

      x++; //x is now 11
      (10 + 1)

      x--; //x is now 10 (11 - 1)

      

      You''ve probably
      never heard of Modulus operations before. Modulus (%) divides two values and
      returns the remainder. For example:

      

      int x = 10 % 3; //1 (10/3
      = 3 remainder 1)'
  - articleName: Assignment Operators
    articleText: 'Assignment operators are operators used to assign values to variables.
      One such operator you''ve already seen is the assignment operator represented
      by an equals sign (=). This simply assigns a value to a variable. For example:

      

      int
      x = 10; //x is now 10

      

      The assignment operator can be combined
      with arithmetic operators to perform an operation involving the variable''s
      value and the given value. For example:

      

      int x = 10;

      x
      += 5; //x is now 15 (x = 10 + 5)

      

      int y = 20;

      y -=
      5; //y is now 15 (y = 20 - 5)

      

      This is because the arithmetic
      assignment operators are used as shorthand for a potentially longer expression.
      The above example "x += 5" can also be written as "x = x + 5". Below is a list
      of arithmetic assignment operators:

      

      "+=" for adding and assigning:
      "x += 5" is the same as "x = x + 5"

      "-=" for subtracting and assigning:
      "x -= 5" is the same as "x = x - 5"

      "*=" for multiplying and assigning:
      "x *= 5" is the same as "x = x * 5"

      "/=" for dividing and assigning:
      "x /= 5" is the same as "x = x / 5"

      "%=" for doing a modulus operation
      and assigning: "x %= 5" is the same as "x = x % 5"'
  - articleName: Read()
    articleText: 'The Bot.Read() and Bot.ReadInt() methods are unique to this game!

      

      Bot.Read()
      and Bot.ReadInt() let G4wain take the information from a nearby wall panel
      and use it as a value or store it in a variable. It takes no arguments. Bot.Read()
      is for strings, Bot.ReadInt() is for integers.

      

      Wall panels
      hold either string or int values and are color coded to show which one they
      are storing. Green panels hold ints, blue panels hold strings.

      

      Imagine
      G4wain is standing next to a blue panel and uses Bot.Read(). This will happen:

      

      //G4wain
      is next to a blue panel

      //the blue panel says "Hello World!"

      string
      text = Bot.Read(); //text now stores "Hello World!"

      Bot.say(Bot.Read());
      //G4wain says "Hello World!"

      

      Bot.ReadInt() works the same
      but for int values instead. Imagine G4wain is standing next to a green panel
      and uses Bot.ReadInt(). These could happen:

      

      //G4wain is next
      to a green panel

      //the green panel stores the number 10

      int
      num = Bot.ReadInt(); //num is now 10

      Bot.say(Bot.ReadInt()); //G4wain
      says 10'
  - articleName: Booleans
    articleText: 'Booleans (bool data types) are values which can store either true
      or false, which are essential to loops and conditional statements - important
      features of a program.

      

      As shown prior in the Variables entry,
      bools are declared with the bool keyword and can only take the values true
      or false. For example:

      

      bool thisIsTrue = true;

      bool
      thisIsFalse = false;

      

      You can also assign boolean expressions
      to bool variables. Boolean expressions compare two values or variables and
      return either true or false based on the result of the comparison. These are
      useful for conditional testing, especially for loops and if-else statements.
      For example:

      

      int x = 10;

      int y = 5;

      bool xIsGreater
      = x > y; //true

      

      In this example, xIsGreater is true because
      10 > 5.

      

      Boolean expressions use their own unique operators
      called comaprison and logical operators, which will be covered in the next
      article.'
  - articleName: Comparison Operators
    articleText: 'Boolean expressions are expressions that use comparison and logical
      operators to evaluate two values and return either true or false, based on
      the result of the evaluation. For example: "5 > 10" is a boolean expression
      since it compares the values 5 and 10 with the ">" operator. Below is a list
      of comparison operators

      

      "==": Equal to - is true when two
      values are the same. For example, "5 == 5" is true as both sides are the same.

      "!=":
      Not equal - is true when two values are different. For example, "5 != 10" is
      true as both sides are different values.

      ">": Greater than - is true
      when the left side is greater than the right side. For example, "10 > 5" is
      true.

      "<": Less than - is true when the left side is less than the
      right side. For example, "5 < 10" is true.

      ">=": Greater than or equal
      to - is true when the left side is greater than or equal to the right side.
      For example, "10 >= 5" is true.

      "<=": Less than or equal to - is true
      when the left side is less than or equal to the right side. For example, "5
      <= 5" is true.

      

      Comparison operators are used only with numerical
      values such as int and double. The equal and not equal comparison operators
      can be used with other data types, provided that both data types are the same.
      For example:

      

      bool myBool = "string" != "string"; //false -
      both are the same

      

      This game will be using int comparisons
      almost exclusively, however.'
  - articleName: Logical Operators
    articleText: 'Along with comparison operators, boolean expressions use logical
      operators to comapre two true or false values. Below is a list of logical operators:

      

      "&&"
      AND - returns true if both statements are true. For example, "5 < 10 && 10
      > 5" is true as both "5 < 10" and "10 > 5" are true.

      "||" OR - returns
      true if one of the statements are true. For example, "true || false" is true
      as one of the statements is true.

      "!" NOT - reverses the value of the
      statement it follows. This operates on one value only. For example, "!(5 <
      10)" is false as "5 < 10" is true but the "!" operator reverses its value,
      making it false.

      

      Here is a truth table of logic:

      AND:

      True
      && True = True

      True && False = False

      False && True = False

      False
      && False = False

      

      OR:

      True || True = True

      True
      || False = True

      False || True = True

      False || False = False

      

      NOT:

      !True
      = False

      !False = True'
  - articleName: If statements
    articleText: "If-Else statements are used for decision-making in programs. Like
      loops, they make use of booleans. There are four types of conditional statements
      in C#: if, else, else if, and switch. For the sake of brevity, this game will
      cover only the first three but these help articles will touch on the switch
      statement for a bit.\r\n\r\nAn if statement is defined like this:\r\nif(condition)\r\n{\r\n 
      //code to be executed\r\n}\r\n\r\nMuch like in loops, the condition can be
      a boolean variable or a boolean expression, as long as it equates to true or
      false. If the condition is true, the code between the \"{}\" of the if statement
      will be executed. Conversely, if the condition is false, the if statement will
      be skipped. For example:\r\n\r\nif(5 < 10)\r\n{\r\n  Bot.say(\"True!\");\r\n}\r\nBot.say(\"Done.\");\r\n\r\nSince
      the condition \"5 < 10\" is true, G4wain will say \"True!\" then say \"Done.\".
      But if the condition were false, for example, putting \"5 > 10\" as the condition
      instead, the if-statement won't executed and the code between its curly brackets
      will be skipped. Thus, G4wain just says \"Done.\"."
  - articleName: Else statements
    articleText: "An else statement is part of an if-else clause. An else statement
      after an if statement is optional but an if statement before an else statement
      is always required. An if-else statement is made like this:\r\n\r\nif(condition)\r\n{\r\n 
      //executes if condition is true\r\n}\r\nelse\r\n{\r\n  //executes if condition
      is false\r\n}\r\n\r\nThe statement works like this: the condition between the
      (), which is a boolean value or expression, is calculated. If the condition
      is true, the code of the if block is executed and the code in the else block
      is ignored. If the condition is false, the code in the if block is ignored
      and the code in the else block is executed instead. Here's an example:\r\n\r\nint
      num = 5;\r\nif(num > 10)\r\n{\r\n  Bot.say(\"num is greater than 10\");\r\n}\r\nelse\r\n{\r\n 
      Bot.say(\"num is not greater than 10\");\r\n}\r\n\r\nThe expression \"num >
      10\" is false, so the code in the if block is ignored and the code in the else
      block is executed instead, thus G4wain says \"num is not greater than 10\".
      Conversely, if, for example, \"num > 10\" were true, the if block runs and
      G4wain says \"num is greater than 10\", then the else block is ignored."
  - articleName: Else if statements
    articleText: "An else-if statement goes between an if and an else statement and
      is a combination of the two. Like an else statement, it requires an if statement
      before it and like an if statement, it can be followed up by an else statement,
      another else-if statement, or the end of the if-else chain. Else if statements
      are used like this:\r\n\r\nif(condition)\r\n{\r\n  //code to be executed if
      this condition is true\r\n}\r\nelse if(condition)\r\n{\r\n  //executed if the
      first condition is false, but this condition is true\r\n}\r\nelse\r\n{\r\n 
      //executed if all above conditions are false\r\n}\r\n\r\nAn else if statement
      is essentially an extra if statement inside an if-else chain. If the first
      if statement's condition is false, its block is skipped. So the computer reads
      the else if statement and checks if its provided condition is true or false,
      executing it or skipping it depending on its condition. An if-else statement
      can have any number of else if statements between the if and else blocks. For
      example:\r\n\r\nint num = 5;\r\nif(num == 10)\r\n{\r\n  Bot.say(\"num is 10!\");\r\n}\r\nelse
      if(num == 7)\r\n{\r\n  Bot.say(\"num is 7!\");\r\n}\r\nelse if(num == 5)\r\n{\r\n 
      Bot.say(\"num is 5!\");\r\n}\r\nelse if(num == 3)\r\n{\r\n  Bot.say(\"num is
      3!\");\r\n}\r\nelse\r\n{\r\n  Bot.say(num);\r\n}\r\n\r\nThe program will start
      evaluating conditions starting with the if statement. The first and second
      conditions are false, so the first two blocks are skipped. \"num == 5\" is
      true, so the code of that block executes and G4wain says \"num is 5!\". The
      computer then skips every else and else if statement in the same chain after.\r\n\r\nTake
      note: creating an if block statement of an else-if statement creates a new
      chain of if-else statements which are separately evaluated."
  - articleName: Loops
    articleText: "Loops execute a block of code as long as the condition given to
      it is true. These are useful as they make code more readable by shortening
      a repetitive sequence of statements into a small block of code that can be
      repeated by the computer.\r\n\r\nThere are three types of loop: while, do/while,
      and for, but this game will cover while loops only as it is the simplest of
      the three.\r\n\r\nThe while loop repeats a block of code between its braces
      as long as its condition is true. Create one with this syntax:\r\n\r\nwhile(condition)\r\n{\r\n 
      //code to be repeated goes here\r\n}\r\n\r\nWhere the condition is a boolean
      - either a boolean variable or a boolean expression and the code to be repeated
      can be whatever you want. Also don't forget to put curly braces ({}) after
      the while statement and at the end of the while statement. The curly braces
      mark the lines of code to be repeated. An example of a working while loop is
      this:\r\n\r\nwhile(true)\r\n{\r\n  Bot.say(\"Hello!\");\r\n}\r\n\r\nThis will
      make G4wain say \"Hello!\" infinitely as the condition of the loop is a constant
      value which is always true. Infinite loops have their uses, but nine times
      out of ten, you'll want to use a loop that eventually ends. This will be covered
      in the next article."
  - articleName: Finite Loops
    articleText: "To create a non-infinite loop, it's better to pass a boolean expression
      as the while loop's condition instead of a constant true/false value. The boolean
      expression must be able to change over time, meaning that it should use variables
      which can be changed by the code within the loop itself. For example:\r\n\r\nint
      num = 0;\r\nwhile (num < 3)\r\n{\r\n  Bot.say(num);\r\n  num++;\r\n}\r\n\r\nThis
      will make G4wain say a number from 0 to 2 depending on how many times the while
      loop has run. Let's break this statement down line by line:\r\n\r\n\"int num
      = 0\" initializes a variable to be used in a boolean expression for the while
      loop.\r\n\"while (num < 3)\" tells the computer to start a loop as long as
      the value of num is less than 3.\r\n\"{\" denotes the start of the block of
      code to be looped.\r\n\"Bot.say(num)\" makes G4wain say the current value of
      num. In the first loop, it's 0. In the next loop, after the code executes the
      line \"num++\", it'll be 1.\r\n\"num++\" increments the value of num every
      time the loop completes. This is important! This makes it so the value of num
      eventually becomes equal to or more than 3 after enough loops have been completed.\r\n\"}\"
      denotes the end of the block of code to be looped.\r\n\r\nThe most important
      part of that statement is the \"num++\" at the end. It adds 1 to the value
      of num every time the loop reaches that line, so in 3 loops, the condition
      \"num < 3\" becomes false and the loop ends.\r\n\r\nAfter a loop ends, it runs
      the line after the \"}\" that closes its block."
  - articleName: Arrays
    articleText: 'Arrays are data structures that store multiple values in a single
      variable, instead of using separate variables for each value, which are called
      elements.

      

      In C#, an array''s elements are given a number called
      an index, and the index starts with 0. Programs start counting from 0, after
      all.

      

      To declare an array, define the variable''s type with
      square brackets. So to declare an array that holds strings, we type:

      

      string[]
      stringArray;

      

      This array doesn''t store any elements yet. To
      do so, assign it an array literal, which is a list of values separated by commas
      inside curly braces followed by a semicolon. For example, we want to create
      an array of even numbers and an array of cakes. Do the following:

      

      int[]
      evenNumbers = {2, 4, 6, 8, 10};

      string[] cake = {"chocolate", "red
      velvet", "confetti"};

      

      We now have an array called evenNumbers
      which stores the int values 2, 4, 6, 8, and 10, and an array called cake which
      stores the strings "chocolate", "red velvet", and "confetti".

      

      To
      get the elements of an array, it must be called with its index. As stated before,
      indices start with 0. So the first element of an array is index 0, the second
      element is index 1, so on so forth. To use an array index, call the array''s
      name followed by square brackets ([]) with the index number inside them. For
      example:

      

      string[] cakeFlavors = {"chocolate", "red velvet",
      "confetti"};

      Bot.say(cake[0]); //G4wain says "chocolate"

      

      In
      this example, the 0th element - the first element - of the array is called.
      So G4wain says "chocolate". If we want him to say "red velvet", we call the
      second element with cake[1], or cake[2] for "confetti".

      

      Take
      note: you cannot call an element outside the bounds of the array. The cakes
      array has only 3 elements. If we tried to call cakes[3], the computer will
      fail to find a fourth element and cause an Out of Bounds error.'
  - articleName: Array assignment
    articleText: 'You can change the values of an array''s elements after creation,
      much like how you can change the values of a variable! Simply call the array''s
      name followed by the index of the element you want to change and assign a new
      value. For example, we have an array of board games:

      

      string[]
      games = {"chess", "poker", "monopoly", "checkers"};

      

      We want
      to change "poker" to another board game like scrabble or battleship. Simply
      call the index of poker and assign a new value, like this:

      

      games[1]
      = "scrabble";

      

      This replaces the value of the second element
      in the games array, so now the array stores these values: "chess", "scrabble",
      "monopoly", "checkers".

      

      But what if we want to assign an entirely
      new array to games? Perhaps an array that can store 5 or 6 values? The ''new''
      keyword is needed for that, which will be discussed later.'
  - articleName: Looping through Arrays
    articleText: "Arrays are useful in that you can also loop through them, meaning
      you can get their elements one by one. To do this, you need the loop's Length
      property. The Length property specifies how many elements are in an array and
      can be acquired by calling the array's name and putting \".Length\" after it.
      Like so:\r\n\r\nint[] numbers = {1,2,3,4,5,6,7};\r\nint numbersLength = numbers.Length;
      //7\r\nBot.say(numbers.Length); //G4wain says 7\r\n\r\nArray numbers has 7
      elements, so its length is 7. You can store it in a variable or use it as a
      value. This is useful for loops, as you can use it as an upper bound for how
      many times a loop should run. As a gameplay example:\r\n\r\nstring[] coords
      = {\"A0\", \"B1\", \"C2\", \"D3\"};\r\nint num = 0;\r\nint coordsLength = coords.Length;
      //4\r\nwhile(num < coordsLength)\r\n{\r\n  Bot.MoveTo(coords[num]);\r\n  num++;\r\n}\r\n\r\nThe
      above example will run the loop 4 times. Each loop, G4wain will move to the
      coordinate stated in the array's element, starting with 0. So G4wain will move
      to tile A0, then B1, then C2, then D3."
  - articleName: The new keyword
    articleText: 'You can declare an array without assigning its variable, like any
      other variable. Like this:

      

      int[] numbers;

      

      The
      array numbers is unassigned. To use it, it must be assigned an array value,
      but you must use the ''new'' keyword. The ''new'' keyword should be followed
      by the array''s data type and square braces with the size of the array between
      the square braces. Like so:

      

      //creates an array with 3 empty
      elements

      numbers = new int[3];

      

      //this is an error

      //there
      needs to be a number between the []

      numbers = new int[];

      

      This
      kind of assignment will create an array with the given size (in this case,
      3) but all its elements are empty or 0. To use the ''new'' keyword to create
      an array with values, do the following:

      

      //creates an array
      with 3,4,5

      //and assigns it to numbers

      numbers = new int[]
      {1,2,3};

      

      Notice how you don''t need to specify the size of
      the array between the square braces when you''re doing it this way. You still
      could, but then you''ll need to provide an array literal with the same size
      as the one you specified:

      

      //creates an array with size 3

      //and
      assigns its value

      numbers = new int[3] {1,2,3};

      

      The
      easiest way to create an array is by simply just assigning its value at the
      same time you declare it. This is only useful if you want to change the entire
      array in one go, but this game won''t make you do that. This is here for sake
      of explanation.'
