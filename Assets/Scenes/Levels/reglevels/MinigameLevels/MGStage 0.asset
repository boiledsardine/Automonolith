%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ff96e8016540e7e4abbeb21f5f72e315, type: 3}
  m_Name: MGStage 0
  m_EditorClassIdentifier: 
  help: {fileID: 11400000, guid: 8778a3fc63cacf2468297959849836ef, type: 2}
  hint: {fileID: 11400000, guid: 743f7b789bcc8b64d99dc8d91414f997, type: 2}
  levelName: Methodical
  levelDesc: 'Hello. You''re willing to help me out, are you? First, I''d like to
    see what you can do.


    -Merlin'
  levelGoal: Arrange the words to form complete method calls.
  startConvo:
  - npcName: Merlin
    showNpc: 1
    npcPos: 82
    npcSprite: {fileID: 21300000, guid: 3439f81a94f3c0a409645c7a40b9a01a, type: 3}
    lines:
    - These are the fragments of my memory. Pieces of code broken up and left with
      huge gaps. Your task, dear Arthur, is to drag those pieces back to where they
      belong then press Submit() once done.
    - You can click the words here, either on the editor or the word bank at the
      bottom of the screen. Doing so reveals some information about them on the dictionary
      on the right hand side of the screen. Use it to your advantage.
    - I could tell you when something is in the wrong place, but I cannot tell you
      exactly what should belong in what slot. Now, let's start with something simple.
    - You've been working with methods recently, I hear. In programming, you'll be
      using them a lot. So why not start with seeing if you can call one properly?
  passConvo:
  - npcName: Merlin
    showNpc: 1
    npcPos: 82
    npcSprite: {fileID: 21300000, guid: 3439f81a94f3c0a409645c7a40b9a01a, type: 3}
    lines:
    - Indeed, I remember now. Yes, that's how it's done. Well, I hope we can continue
      helping each other out from now on.
  mainText: '//Put here a method to move your robot one space left

    Bot _ moveLeft
    _ _


    //Put here a method to output text to a console

    //use the WriteLine
    method

    Console._ _ _ _;'
  hidWords:
  - hiddenText: .
    correctAnswers:
    - ()
    - .
    mistakeMessage: '2: You need a punctuation mark here of some kind to tell the
      machine to look inside the "Bot" class and get one of the methods it contains.

      Classes
      and member methods are part of a whole mess about object orientation which
      we wouldn''t bother with today.'
  - hiddenText: ()
    correctAnswers:
    - ()
    - (
    mistakeMessage: '2: What comes after a method''s name? A form of punctuation
      that allows the method to take arguments.'
  - hiddenText: ;
    correctAnswers:
    - ()
    - )
    - ;
    mistakeMessage: '2: You have to close this line as a complete statement. There''s
      a punctuation mark set aside for it...'
  - hiddenText: WriteLine
    correctAnswers:
    - WriteLine
    mistakeMessage: '6: A dot tells the code to look inside the object on its left
      side. What goes on the right of the dot is a name belonging to that object,
      like a variable or a method. That being said, a method name should go here.'
  - hiddenText: (
    correctAnswers:
    - (
    mistakeMessage: '6: What comes after a method''s name? A form of punctuation
      that opens groups and allows the method to take arguments.'
  - hiddenText: '"Hello World!"'
    correctAnswers:
    - '"Hello World!"'
    mistakeMessage: '6: Arguments are values passed into methods for them to do things.
      Some need methods, some don''t - the method on this line can do either, but
      for now I need you to give it an argument anyway.'
  - hiddenText: )
    correctAnswers:
    - ()
    - )
    mistakeMessage: '6: You have to close the method''s arguments somehow. There''s
      a punctuation mark set aside for it...'
  wordBank:
  - .
  - ()
  - ;
  - WriteLine
  - (
  - '"Hello World!"'
  - )
  levelDictionary:
  - keyword: Console
    description: A System class in C#. Has methods you need to do things with the
      console.
  - keyword: WriteLine
    description: A function that prints its argument out to the console or terminal.
      It requires an argument.
  - keyword: '"Hello World!"'
    description: A string value! Use this as the argument for WriteLine.
  - keyword: moveLeft
    description: G4wain uses this to move left a number of spaces! Don't pass arguments
      into this one for now.
