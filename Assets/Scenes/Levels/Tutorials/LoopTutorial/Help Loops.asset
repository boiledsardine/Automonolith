%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: e992c02bdb92cd640adeb653ce9d10fb, type: 3}
  m_Name: Help Loops
  m_EditorClassIdentifier: 
  articleBlocks:
  - articleName: Loops
    articleText: "Loops execute a block of code as long as the condition given to
      it is true. These are useful as they make code more readable by shortening
      a repetitive sequence of statements into a small block of code that can be
      repeated by the computer.\r\n\r\nThere are three types of loop: while, do/while,
      and for, but this game will cover while loops only as it is the simplest of
      the three.\r\n\r\nThe while loop repeats a block of code between its braces
      as long as its condition is true. Create one with this syntax:\r\n\r\nwhile(condition)\r\n{\r\n 
      //code to be repeated goes here\r\n}\r\n\r\nWhere the condition is a boolean
      - either a boolean variable or a boolean expression and the code to be repeated
      can be whatever you want. Also don't forget to put curly braces ({}) after
      the while statement and at the end of the while statement. The curly braces
      mark the lines of code to be repeated. An example of a working while loop is
      this:\r\n\r\nwhile(true)\r\n{\r\n  Bot.say(\"Hello!\");\r\n}\r\n\r\nThis will
      make G4wain say \"Hello!\" infinitely as the condition of the loop is a constant
      value which is always true. Infinite loops have their uses, but nine times
      out of ten, you'll want to use a loop that eventually ends. This will be covered
      in the next article."
  - articleName: Finite Loops
    articleText: "To create a non-infinite loop, it's better to pass a boolean expression
      as the while loop's condition instead of a constant true/false value. The boolean
      expression must be able to change over time, meaning that it should use variables
      which can be changed by the code within the loop itself. For example:\r\n\r\nint
      num = 0;\r\nwhile (num < 3)\r\n{\r\n  Bot.say(num);\r\n  num++;\r\n}\r\n\r\nThis
      will make G4wain say a number from 0 to 2 depending on how many times the while
      loop has run. Let's break this statement down line by line:\r\n\r\n\"int num
      = 0\" initializes a variable to be used in a boolean expression for the while
      loop.\r\n\"while (num < 3)\" tells the computer to start a loop as long as
      the value of num is less than 3.\r\n\"{\" denotes the start of the block of
      code to be looped.\r\n\"Bot.say(num)\" makes G4wain say the current value of
      num. In the first loop, it's 0. In the next loop, after the code executes the
      line \"num++\", it'll be 1.\r\n\"num++\" increments the value of num every
      time the loop completes. This is important! This makes it so the value of num
      eventually becomes equal to or more than 3 after enough loops have been completed.\r\n\"}\"
      denotes the end of the block of code to be looped.\r\n\r\nThe most important
      part of that statement is the \"num++\" at the end. It adds 1 to the value
      of num every time the loop reaches that line, so in 3 loops, the condition
      \"num < 3\" becomes false and the loop ends.\r\n\r\nAfter a loop ends, it runs
      the line after the \"}\" that closes its block."
  - articleName: Booleans
    articleText: 'loops and conditional statements - important features of a program.

      

      As
      shown prior in the Variables entry, bools are declared with the bool keyword
      and can only take the values true or false. For example:

      

      bool
      thisIsTrue = true;

      bool thisIsFalse = false;

      

      You can
      also assign boolean expressions to bool variables. Boolean expressions compare
      two values or variables and return either true or false based on the result
      of the comparison. These are useful for conditional testing, especially for
      loops and if-else statements. For example:

      

      int x = 10;

      int
      y = 5;

      bool xIsGreater = x > y; //true

      

      In this example,
      xIsGreater is true because 10 > 5.

      

      Boolean expressions use
      their own unique operators called comparison and logical operators, which will
      be covered in the next article.

'
  - articleName: Comparison Operators
    articleText: 'Boolean expressions are expressions that use comparison and logical
      operators to evaluate two values and return either true or false, based on
      the result of the evaluation. For example: "5 > 10" is a boolean expression
      since it compares the values 5 and 10 with the ">" operator. Below is a list
      of comparison operators:

      

      "==": Equal to - is true when two
      values are the same. For example, "5 == 5" is true as both sides are the same.

      "!=":
      Not equal - is true when two values are different. For example, "5 != 10" is
      true as both sides are different values.

      ">": Greater than - is true
      when the left side is greater than the right side. For example, "10 > 5" is
      true.

      "<": Less than - is true when the left side is less than the
      right side. For example, "5 < 10" is true.

      ">=": Greater than or equal
      to - is true when the left side is greater than or equal to the right side.
      For example, "10 >= 5" is true.

      "<=": Less than or equal to - is true
      when the left side is less than or equal to the right side. For example, "5
      <= 5" is true.

      

      Comparison operators are used only with numerical
      values such as int and double. The equal and not equal comparison operators
      can be used with other data types, provided that both data types are the same.
      For example:

      

      bool myBool = "string" != "string"; //false -
      both are the same

      

      This game will be using int comparisons
      almost exclusively, however.

'
  - articleName: Logical Operators
    articleText: 'Along with comparison operators, boolean expressions use logical
      operators to compare two true or false values. Below is a list of logical operators:

      

      "&&"
      AND - returns true if both statements are true. For example, "5 < 10 && 10
      > 5" is true as both "5 < 10" and "10 > 5" are true.

      "||" OR - returns
      true if one of the statements are true. For example, "true || false" is true
      as one of the statements is true.

      "!" NOT - reverses the value of the
      statement it follows. This operates on one value only. For example, "!(5 <
      10)" is false as "5 < 10" is true but the "!" operator reverses its value,
      making it false.

      

      Here is a truth table of logic:

      AND:

      True
      && True = True

      True && False = False

      False && True = False

      False
      && False = False

      

      OR:

      True || True = True

      True
      || False = True

      False || True = True

      False || False = False

      

      NOT:

      !True
      = False

      !False = True

'
