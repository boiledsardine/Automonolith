%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: e992c02bdb92cd640adeb653ce9d10fb, type: 3}
  m_Name: Help IfElse
  m_EditorClassIdentifier: 
  articleBlocks:
  - articleName: If Statements
    articleText: "If-Else statements are used for decision-making in programs. Like
      loops, they make use of booleans. There are four types of conditional statements
      in C#: if, else, else if, and switch. For the sake of brevity, this game will
      cover only the first three but these help articles will touch on the switch
      statement for a bit.\r\n\r\nAn if statement is defined like this:\r\nif(condition)\r\n{\r\n 
      //code to be executed\r\n}\r\n\r\nMuch like in loops, the condition can be
      a boolean variable or a boolean expression, as long as it equates to true or
      false. If the condition is true, the code between the \"{}\" of the if statement
      will be executed. Conversely, if the condition is false, the if statement will
      be skipped. For example:\r\n\r\nif(5 < 10)\r\n{\r\n  Bot.say(\"True!\");\r\n}\r\nBot.say(\"Done.\");\r\n\r\nSince
      the condition \"5 < 10\" is true, G4wain will say \"True!\" then say \"Done.\".
      But if the condition were false, for example, putting \"5 > 10\" as the condition
      instead, the if-statement won't executed and the code between its curly brackets
      will be skipped. Thus, G4wain just says \"Done.\"."
  - articleName: Else statements
    articleText: "An else statement is part of an if-else clause. An else statement
      after an if statement is optional but an if statement before an else statement
      is always required. An if-else statement is made like this:\r\n\r\nif(condition)\r\n{\r\n 
      //executes if condition is true\r\n}\r\nelse\r\n{\r\n  //executes if condition
      is false\r\n}\r\n\r\nThe statement works like this: the condition between the
      (), which is a boolean value or expression, is calculated. If the condition
      is true, the code of the if block is executed and the code in the else block
      is ignored. If the condition is false, the code in the if block is ignored
      and the code in the else block is executed instead. Here's an example:\r\n\r\nint
      num = 5;\r\nif(num > 10)\r\n{\r\n  Bot.say(\"num is greater than 10\");\r\n}\r\nelse\r\n{\r\n 
      Bot.say(\"num is not greater than 10\");\r\n}\r\n\r\nThe expression \"num >
      10\" is false, so the code in the if block is ignored and the code in the else
      block is executed instead, thus G4wain says \"num is not greater than 10\".
      Conversely, if, for example, \"num > 10\" were true, the if block runs and
      G4wain says \"num is greater than 10\", then the else block is ignored."
  - articleName: Else if statements
    articleText: "An else-if statement goes between an if and an else statement and
      is a combination of the two. Like an else statement, it requires an if statement
      before it and like an if statement, it can be followed up by an else statement,
      another else-if statement, or the end of the if-else chain. Else if statements
      are used like this:\r\n\r\nif(condition)\r\n{\r\n  //code to be executed if
      this condition is true\r\n}\r\nelse if(condition)\r\n{\r\n  //executed if the
      first condition is false, but this condition is true\r\n}\r\nelse\r\n{\r\n 
      //executed if all above conditions are false\r\n}\r\n\r\nAn else if statement
      is essentially an extra if statement inside an if-else chain. If the first
      if statement's condition is false, its block is skipped. So the computer reads
      the else if statement and checks if its provided condition is true or false,
      executing it or skipping it depending on its condition. An if-else statement
      can have any number of else if statements between the if and else blocks. For
      example:\r\n\r\nint num = 5;\r\nif(num == 10)\r\n{\r\n  Bot.say(\"num is 10!\");\r\n}\r\nelse
      if(num == 7)\r\n{\r\n  Bot.say(\"num is 7!\");\r\n}\r\nelse if(num == 5)\r\n{\r\n 
      Bot.say(\"num is 5!\");\r\n}\r\nelse if(num == 3)\r\n{\r\n  Bot.say(\"num is
      3!\");\r\n}\r\nelse\r\n{\r\n  Bot.say(num);\r\n}\r\n\r\nThe program will start
      evaluating conditions starting with the if statement. The first and second
      conditions are false, so the first two blocks are skipped. \"num == 5\" is
      true, so the code of that block executes and G4wain says \"num is 5!\". The
      computer then skips every else and else if statement in the same chain after.\r\n\r\nTake
      note: creating an if block statement of an else-if statement creates a new
      chain of if-else statements which are separately evaluated."
  - articleName: CheckCube()
    articleText: "The Bot.CheckCube() method is unique to this game!\r\n\r\nBot.CheckCube()
      lets G4wain check the color of a cube he's holding. You can only use this while
      G4wain's holding a cube, or else it'll make a runtime error.\r\n\r\nCheckCube()
      takes string arguments which can either be \"red\", \"green\", or \"blue\".
      It is true when the color between the () is the same as the color of the cube.\r\n\r\nImagine
      G4wain is holding a blue cube and you use CheckCube(). This will happen:\r\n\r\n//G4wain's
      holding a blue cube\r\nbool isBlue = Bot.CheckCube(\"blue\"); //this is true\r\nbool
      isRed = Bot.CheckCube(\"red\"); //this is false\r\n\r\nBecause CheckCube()
      returns a boolean value, you can also use a complete CheckCube() method as
      a condition for if-else statements!\r\n\r\n//G4wain's holding a blue cube\r\nif(Bot.CheckCube(\"blue\"))\r\n{\r\n 
      Bot.say(\"Blue!\");\r\n}\r\nelse if(Bot.CheckCube(\"red\"))\r\n{\r\n  Bot.say(\"Red!\");\r\n}\r\nelse\r\n{\r\n 
      Bot.say(\"Green!\");\r\n}\r\n//G4wain says blue"
  - articleName: Booleans
    articleText: 'Booleans (bool data types) are values which can store either true
      or false, which are essential to loops and conditional statements - important
      features of a program.

      

      As shown prior in the Variables entry,
      bools are declared with the bool keyword and can only take the values true
      or false. For example:

      

      bool thisIsTrue = true;

      bool
      thisIsFalse = false;

      

      You can also assign boolean expressions
      to bool variables. Boolean expressions compare two values or variables and
      return either true or false based on the result of the comparison. These are
      useful for conditional testing, especially for loops and if-else statements.
      For example:

      

      int x = 10;

      int y = 5;

      bool xIsGreater
      = x > y; //true

      

      In this example, xIsGreater is true because
      10 > 5.

      

      Boolean expressions use their own unique operators
      called comaprison and logical operators, which will be covered in the next
      article.'
  - articleName: Comparison Operators
    articleText: 'Boolean expressions are expressions that use comparison and logical
      operators to evaluate two values and return either true or false, based on
      the result of the evaluation. For example: "5 > 10" is a boolean expression
      since it compares the values 5 and 10 with the ">" operator. Below is a list
      of comparison operators

      

      "==": Equal to - is true when two
      values are the same. For example, "5 == 5" is true as both sides are the same.

      "!=":
      Not equal - is true when two values are different. For example, "5 != 10" is
      true as both sides are different values.

      ">": Greater than - is true
      when the left side is greater than the right side. For example, "10 > 5" is
      true.

      "<": Less than - is true when the left side is less than the
      right side. For example, "5 < 10" is true.

      ">=": Greater than or equal
      to - is true when the left side is greater than or equal to the right side.
      For example, "10 >= 5" is true.

      "<=": Less than or equal to - is true
      when the left side is less than or equal to the right side. For example, "5
      <= 5" is true.

      

      Comparison operators are used only with numerical
      values such as int and double. The equal and not equal comparison operators
      can be used with other data types, provided that both data types are the same.
      For example:

      

      bool myBool = "string" != "string"; //false -
      both are the same

      

      This game will be using int comparisons
      almost exclusively, however.'
  - articleName: Logical Operators
    articleText: 'Along with comparison operators, boolean expressions use logical
      operators to comapre two true or false values. Below is a list of logical operators:

      

      "&&"
      AND - returns true if both statements are true. For example, "5 < 10 && 10
      > 5" is true as both "5 < 10" and "10 > 5" are true.

      "||" OR - returns
      true if one of the statements are true. For example, "true || false" is true
      as one of the statements is true.

      "!" NOT - reverses the value of the
      statement it follows. This operates on one value only. For example, "!(5 <
      10)" is false as "5 < 10" is true but the "!" operator reverses its value,
      making it false.

      

      Here is a truth table of logic:

      AND:

      True
      && True = True

      True && False = False

      False && True = False

      False
      && False = False

      

      OR:

      True || True = True

      True
      || False = True

      False || True = True

      False || False = False

      

      NOT:

      !True
      = False

      !False = True'
