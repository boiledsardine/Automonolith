%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: e992c02bdb92cd640adeb653ce9d10fb, type: 3}
  m_Name: Help Arrays
  m_EditorClassIdentifier: 
  articleBlocks:
  - articleName: Arrays
    articleText: 'Arrays are data structures that store multiple values in a single
      variable, instead of using separate variables for each value, which are called
      elements.



      In C#, an array''s elements are given a number called an
      index, and the index starts with 0. Programs start counting from 0, after all.



      To
      declare an array, define the variable''s type with square brackets. So to declare
      an array that holds strings, we type:



      string[] stringArray;



      This
      array doesn''t store any elements yet. To do so, assign it an array literal,
      which is a list of values separated by commas inside curly braces followed
      by a semicolon. For example, we want to create an array of even numbers and
      an array of cakes. Do the following:



      int[] evenNumbers = {2, 4, 6,
      8, 10};

      string[] cake = {"chocolate", "red velvet", "confetti"};



      We
      now have an array called evenNumbers which stores the int values 2, 4, 6, 8,
      and 10, and an array called cake which stores the strings "chocolate", "red
      velvet", and "confetti".



      To get the elements of an array, it must
      be called with its index. As stated before, indices start with 0. So the first
      element of an array is index 0, the second element is index 1, so on so forth.
      To use an array index, call the array''s name followed by square brackets ([])
      with the index number inside them. For example:



      string[] cakeFlavors
      = {"chocolate", "red velvet", "confetti"};

      Bot.say(cake[0]); //G4wain
      says "chocolate"



      In this example, the 0th element - the first element
      - of the array is called. So G4wain says "chocolate". If we want him to say
      "red velvet", we call the second element with cake[1], or cake[2] for "confetti".



      Take
      note: you cannot call an element outside the bounds of the array. The cakes
      array has only 3 elements. If we tried to call cakes[3], the computer will
      fail to find a fourth element and cause an Out of Bounds error.'
  - articleName: Array assignment
    articleText: 'You can change the values of an array''s elements after creation,
      much like how you can change the values of a variable! Simply call the array''s
      name followed by the index of the element you want to change and assign a new
      value. For example, we have an array of board games:



      string[] games
      = {"chess", "poker", "monopoly", "checkers"};



      We want to change "poker"
      to another board game like scrabble or battleship. Simply call the index of
      poker and assign a new value, like this:



      games[1] = "scrabble";



      This
      replaces the value of the second element in the games array, so now the array
      stores these values: "chess", "scrabble", "monopoly", "checkers".



      But
      what if we want to assign an entirely new array to games? Perhaps an array
      that can store 5 or 6 values? The ''new'' keyword is needed for that, which
      will be discussed later.'
  - articleName: Looping
    articleText: "Arrays are useful in that you can also loop through them, meaning
      you can get their elements one by one. To do this, you need the loop's Length
      property. The Length property specifies how many elements are in an array and
      can be acquired by calling the array's name and putting \".Length\" after it.
      Like so:\r\n\r\nint[] numbers = {1,2,3,4,5,6,7};\r\nint numbersLength = numbers.Length;
      //7\r\nBot.say(numbers.Length); //G4wain says 7\r\n\r\nArray numbers has 7
      elements, so its length is 7. You can store it in a variable or use it as a
      value. This is useful for loops, as you can use it as an upper bound for how
      many times a loop should run. As a gameplay example:\r\n\r\nstring[] coords
      = {\"A0\", \"B1\", \"C2\", \"D3\"};\r\nint num = 0;\r\nint coordsLength = coords.Length;
      //4\r\nwhile(num < coordsLength)\r\n{\r\n  Bot.MoveTo(coords[num]);\r\n  num++;\r\n}\r\n\r\nThe
      above example will run the loop 4 times. Each loop, G4wain will move to the
      coordinate stated in the array's element, starting with 0. So G4wain will move
      to tile A0, then B1, then C2, then D3."
  - articleName: The new keyword
    articleText: 'You can declare an array without assigning its variable, like any
      other variable. Like this:


      int[] numbers;


      The array numbers
      is unassigned. To use it, it must be assigned an array value, but you must
      use the ''new'' keyword. The ''new'' keyword should be followed by the array''s
      data type and square braces with the size of the array between the square braces.
      Like so:



      //creates an array with 3 empty elements

      numbers =
      new int[3];



      //this is an error

      //there needs to be a number
      between the []

      numbers = new int[];



      This kind of assignment
      will create an array with the given size (in this case, 3) but all its elements
      are empty or 0. To use the ''new'' keyword to create an array with values,
      do the following:



      //creates an array with 3,4,5

      //and assigns
      it to numbers

      numbers = new int[] {1,2,3};



      Notice how you don''t
      need to specify the size of the array between the square braces when you''re
      doing it this way. You still could, but then you''ll need to provide an array
      literal with the same size as the one you specified:



      //creates an
      array with size 3

      //and assigns its value

      numbers = new int[3]
      {1,2,3};



      The easiest way to create an array is by simply just assigning
      its value at the same time you declare it. This is only useful if you want
      to change the entire array in one go, but this game won''t make you do that.
      This is here for sake of explanation.'
  - articleName: ReadArray()
    articleText: 'The ReadIntArr() and ReadStringArr() methods are unique to this
      game!



      Bot.ReadIntArr() and Bot.ReadStringArr() are used like Bot.ReadInt()
      and Bot.ReadString(), but for arrays instead of singular values. Use them to
      get an array from a wall panel and store it in an array variable. Panels with
      int arrays are yellow and panels with string arrays are red.



      Imagine
      G4wain is standing next to a yellow panel and uses Bot.ReadIntArr(). This will
      happen:

      //G4wain is next to a yellow panel

      //the yellow panel
      stores {7,8,9}

      int[] nums = Bot.ReadIntArr(); //{7,8,9} is now stored
      in nums

      Bot.say(nums[0]); //G4wain says 7

      Bot.say(nums[1]); //G4wain
      says 8

      Bot.say(nums[2]); //G4wain says 9



      Imagine G4wain is
      standing next to a yellow panel and uses Bot.ReadStringArr(). This will happen:

      //G4wain
      is next to a red panel

      //the red panel stores {"peanut","walnut","chestnut"}

      string[]
      nuts = Bot.ReadStringArr(); //{"peanut","walnut","chestnut"} is now stored
      in nuts

      Bot.say(nuts[0]); //G4wain says "peanut"

      Bot.say(nuts[1]);
      //G4wain says "walnut"

      Bot.say(nuts[2]); //G4wain says "chestnut"



      The
      game will handle assigning arrays itself at the start of a level that requires
      arrays to make thinsg easier, though this is here if you ever need it.'
